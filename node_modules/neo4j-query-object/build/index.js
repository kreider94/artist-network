"use strict";

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
    Copyright 2015 John Mothershed

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 */

/**
 * @module neo4j-query-object
 * @requires {@link https://www.npmjs.com/package/lodash|lodash}
 */

/**
 * Stored Query Object, an object that contains information about an individual
 * query to send to the database.
 *
 * @typedef {object} module:neo4j-query-object~queryConfigObj
 * @property {string} [query=""] -
 * The raw query
 * @property {object} [parameters={}] -
 * The query parameters
 * @property {boolean} [raw=false] -
 * Don't parse this individual query
 * @property {object} [meta={}] -
 * Any additional properties to attach to this object for the cb function or
 * something else to use. Wont be sent to or used by the db at all, just a place
 * to store extra information for internal purpose.
 */

/**
 * Database Parsed Result Object, this is the object the promise will resolve
 * with no matter ifi ts rejected or resolved.
 *
 * @typedef {object} module:neo4j-query-object~queryResultObj
 * @property {any} [err] -
 * Any error that might have arisen from anything, it will be filled out only
 * on a rejected promise and has no structure
 * @property {object} [result] -
 * The complete parsed response if an error didn't occur and raw mode is
 * disabled
 * @property {object} [rawResult] -
 * The complete unparsed response if an error didn't occur
 * @property {string} [rawBody] -
 * The raw / unparsed JSON result if an error didn't occur
 * @property {object} [firstColumn] -
 * The first parsed column of the result if an error didn't occur and raw mode is
 * disabled
 * @property {object} [firstValue] -
 * The first parsed value of the first parsed column if an error didn't occur and raw mode is
 * disabled
 * @property {module:neo4j-query-object} queryObj -
 * The original query object class instance which contains all the properties
 * and methods
 */

/**
 * Creates an instance of this class, one instance per query. Upon creation
 * a promise will be generated which will be finalized when issued with the
 * result.
 *
 * Once a promise is issued a new one will be generated in case the instance is
 * used again.
 *
 * @class module:neo4j-query-object
 * @classdesc
 * This class handles "Query Objects", an object that holds a single query with
 * configuration on how to handle the query along with a method to issue a
 * proper callback on a parsed or unparsed query response.
 *
 * @summary
 * A query and its configuration and proper callback
 * @param  {module:neo4j-query-object~queryConfigObj} [obj={}] -
 * Instance Configuration
 * @author {@link http://codepen.io/wiseguy12851|John Mothershed}
 * @copyright 2015 John Mothershed
 * @license {@link http://www.apache.org/licenses/LICENSE-2.0|Apache-2.0}
 * @version 2.0.2
 * @example
 * // Create a new instance
 * new Neo4jQueryObject()
 */
module.exports = (function () {
    // An empty object forces all parameters to be set to the defaults

    function _class() {
        var obj = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
        (0, _classCallCheck3.default)(this, _class);

        this.update(obj, true);
        this.generatePromise();
    }

    /**
     * Destroy the current promise and create a new one, should never be called
     * explicitly, only intended and needed to be called right after the
     * current promise has been executed.
     *
     * @private
     * @instance
     * @method generatePromise
     * @summary
     * Destroy the current promise and create a new one
     * @since 2.0.0
     * @return {undefined}
     */

    (0, _createClass3.default)(_class, [{
        key: "generatePromise",
        value: function generatePromise() {
            var _this = this;

            /**
             * Holds the public promise instance, this is the promise to return
             *
             * @public
             * @instance
             * @member promise
             * @type {Promise}
             * @since 2.0.0
             */
            this.promise = new _promise2.default(function (resolve, reject) {
                /**
                 * Resolves the promise, should never be called explicitly, only by
                 * issuePromise
                 *
                 * @private
                 * @instance
                 * @member resolve
                 * @type {Promise}
                 * @since 2.0.0
                 */
                _this.resolve = resolve;

                /**
                 * Rejects the promise, should never be called explicitly, only by
                 * issuePromise
                 *
                 * @private
                 * @instance
                 * @member reject
                 * @type {Promise}
                 * @since 2.0.0
                 */
                _this.reject = reject;
            });
        }

        /**
         * Update individual class configuration or completely reset all configuration.
         * Essentailly any properties passed to the constructor can be chnaged here
         * individually (default) or completely (as though a new class was instiantiated)
         *
         * @public
         * @instance
         * @method update
         * @summary
         * Update or completely reset this class instance properties
         * @since 1.0.0
         * @param  {module:neo4j-query-object~queryConfigObj} [obj={}] -
         * Configuration, defaults to nothing
         * @param  {boolean} [reset=false] -
         * Reset all instead of updating individually, this will cause all
         * non-specified parameters to be set to undefined
         * @return {undefined}
         * @example
         * // Change the query to be unparsed (raw)
         * this.update({
         *     raw: true
         * })
         */

    }, {
        key: "update",
        value: function update() {
            var obj = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
            var reset = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

            if (obj.query !== undefined || reset) this.query = obj.query;

            if (obj.parameters !== undefined || reset) this.parameters = obj.parameters;

            if (obj.raw !== undefined || reset) this.raw = obj.raw;

            if (obj.meta !== undefined || reset) this.meta = obj.meta;
        }

        /**
         * The query
         *
         * @public
         * @instance
         * @member query
         * @type {string}
         * @default ""
         * @since 1.0.0
         */

    }, {
        key: "issuePromise",

        /**
         * Pass information from the result that will determine whether the
         * promise should be rejected or resolved based on `err` being filled
         * out or not.
         *
         * The promise will then be resolved or rejected and a new promise will
         * take its place in case this instance is desired to be re-used in some
         * way.
         *
         * @public
         * @instance
         * @method issuePromise
         * @summary
         * issue promise on query
         * @since 1.0.0
         * @param  {any} [err] -
         * Error from query, if any
         * @param  {module:neo4j-query-object~queryResultObj} [obj={}] -
         * The result object to provide
         *
         * "queryObj" property should not be provided and will be ignored if
         * done so, that property is set by the method and references this class.
         * @return {Promise}
         * The promise for conviniance
         */
        value: function issuePromise() {
            var err = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];
            var obj = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            // Prepare promise object
            var cbObj = {
                err: err,
                result: obj.result,
                rawResult: obj.rawResult,
                rawBody: obj.rawBody,
                firstColumn: obj.firstColumn,
                firstValue: obj.firstValue,
                queryObj: this
            };

            // Reject promise of err is truthy, otherwise resolve it
            if (err) this.reject(cbObj);else this.resolve(cbObj);

            // For conviniance, return the promise from this method
            // Since its about to be overwritten with a new instance,
            // save it here first
            var promise = this.promise;

            // Generate new promise
            this.generatePromise();

            // Return used promise
            // Promises have the awesome side-effect of still being useable late in
            // the game even after they've been resolved or rejected
            return promise;
        }
    }, {
        key: "query",
        get: function get() {
            return this._query;
        },
        set: function set(value) {
            // Only allow strings, anything other than a string will reset this value to
            // an empty string
            if (typeof value === "string") this._query = value;else this._query = "";
        }

        /**
         * Query parameters to pass to the database
         *
         * @public
         * @instance
         * @member parameters
         * @type {object}
         * @default {}
         * @since 1.0.0
         */

    }, {
        key: "parameters",
        get: function get() {
            return this._parameters;
        },
        set: function set(value) {
            // Only allow objects anything else will reset to an empty object
            if (typeof value === "object") this._parameters = value;else this._parameters = {};
        }

        /**
         * Whether to parse the result from this query or not
         *
         * @public
         * @instance
         * @member raw
         * @type {boolean}
         * @default false
         * @since 1.0.0
         */

    }, {
        key: "raw",
        get: function get() {
            return this._raw;
        },
        set: function set(value) {
            // Only allow boolean anything else will reset to an empty object
            if (typeof value === "boolean") this._raw = value;else this._raw = false;
        }

        /**
         * Meta information for internal-use only
         *
         * @public
         * @instance
         * @member meta
         * @type {object}
         * @default {}
         * @since 1.0.0
         */

    }, {
        key: "meta",
        get: function get() {
            return this._meta;
        },
        set: function set(value) {
            // Only allow objects anything else will reset to an empty object
            if (typeof value === "object") this._meta = value;else this._meta = {};
        }
    }]);
    return _class;
})();